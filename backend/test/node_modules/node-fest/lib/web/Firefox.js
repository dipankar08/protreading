"use strict";
// https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var EBrowserType;
(function (EBrowserType) {
    EBrowserType[EBrowserType["Chrome"] = 0] = "Chrome";
    EBrowserType[EBrowserType["Firefox"] = 1] = "Firefox";
})(EBrowserType = exports.EBrowserType || (exports.EBrowserType = {}));
var selenium_webdriver_1 = require("selenium-webdriver");
var chrome = require("selenium-webdriver/chrome");
var firefox = require("selenium-webdriver/firefox");
var firefox_1 = require("selenium-webdriver/firefox");
var chromeDriver = require('chromedriver');
var geckodriver = require('geckodriver');
var windowSize = {
    width: 1920,
    height: 1080,
};
function getChromeDriver() {
    return __awaiter(this, void 0, void 0, function () {
        var driverPath, driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    driverPath = chromeDriver.path;
                    return [4 /*yield*/, new selenium_webdriver_1.Builder()
                            .withCapabilities(selenium_webdriver_1.Capabilities.chrome())
                            .setChromeService(new chrome.ServiceBuilder(driverPath))
                            .setChromeOptions(new chrome.Options().windowSize(windowSize).addArguments('--incognito'))
                            .build()];
                case 1:
                    driver = _a.sent();
                    return [2 /*return*/, driver];
            }
        });
    });
}
function getFireFoxDriver() {
    return __awaiter(this, void 0, void 0, function () {
        var driverPath, driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    driverPath = geckodriver.path;
                    return [4 /*yield*/, new selenium_webdriver_1.Builder()
                            .withCapabilities(selenium_webdriver_1.Capabilities.firefox())
                            .setFirefoxService(new firefox.ServiceBuilder(driverPath))
                            .setFirefoxOptions(new firefox.Options().windowSize(windowSize)
                            .setPreference('browser.privatebrowsing.autostart', true))
                            .build()];
                case 1:
                    driver = _a.sent();
                    return [2 /*return*/, driver];
            }
        });
    });
}
function getWebDriver(context) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (context.browser) {
                case EBrowserType.Chrome:
                    return [2 /*return*/, getChromeDriver()];
                case EBrowserType.Firefox:
                    return [2 /*return*/, getFireFoxDriver()];
                default:
                    throw new Error("Not support type " + context + ".");
            }
            return [2 /*return*/];
        });
    });
}
exports.getWebDriver = getWebDriver;
function getOptions(context) {
    var option = new firefox_1.Options();
    option.addArguments('disable-infobars');
    option.addArguments("--use-fake-ui-for-media-stream=1");
    if (context.headless) {
        option.addArguments('--headless');
        option.addArguments('--no-sandbox');
        option.addArguments("--start-maximized");
        option.addArguments("--window-size=1920,1080");
    }
    return option;
}
//# sourceMappingURL=Firefox.js.map