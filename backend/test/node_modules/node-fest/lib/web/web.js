"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var BaseTest_1 = require("../common/BaseTest");
var utils_1 = require("../common/utils");
require("./Extensions");
var Browser_1 = require("./Browser");
var WSTest = /** @class */ (function (_super) {
    __extends(WSTest, _super);
    function WSTest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WSTest.prototype.addMoreOption = function (p) {
        p.option('-hl, --headless <headless>', 'Run with headless browser');
        p.option('-q, --quit <quit>', 'pass this argument if you want to quit the browner at end');
        p.option('-b, --browser <browser>', 'Pass chrome or firefox');
    };
    WSTest.prototype.modifyContextForDebug = function () {
        this.context.file = '/Users/dip/dipankar/node-fest/src/web/sample.txt';
        //this.context.browser = "firefox";
        //this.context.line = 10;
        //this.context.limit = 2;
        // context.headless = false
        // context.quit = false;
    };
    WSTest.prototype.onBeforeExecuteTest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.context;
                        return [4 /*yield*/, Browser_1.getWebDriver(this.context)];
                    case 1:
                        _a.driver = _b.sent();
                        return [4 /*yield*/, this.context.driver.manage().window().maximize()];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    WSTest.prototype.onAfterExecuteTest = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.context.quit) return [3 /*break*/, 3];
                        if (!(this.context.headless == false)) return [3 /*break*/, 2];
                        return [4 /*yield*/, utils_1.sleep(3)];
                    case 1:
                        _b.sent(); // 3 sec to check
                        _b.label = 2;
                    case 2:
                        (_a = this.context.driver) === null || _a === void 0 ? void 0 : _a.quit();
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    // executing test case...
    WSTest.prototype.executeTest = function (tc) {
        return __awaiter(this, void 0, void 0, function () {
            var driver, _a, title;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        driver = this.context.driver;
                        _a = tc.command;
                        switch (_a) {
                            case 'open': return [3 /*break*/, 1];
                            case 'verifyBodyText': return [3 /*break*/, 3];
                            case 'verifyNoBodyText': return [3 /*break*/, 5];
                            case 'verifyAttr': return [3 /*break*/, 7];
                            case 'setAttr': return [3 /*break*/, 9];
                            case 'verifyText': return [3 /*break*/, 11];
                            case 'verifyTitle': return [3 /*break*/, 13];
                            case 'click': return [3 /*break*/, 15];
                            case 'clickWaitVerify': return [3 /*break*/, 17];
                            case 'input': return [3 /*break*/, 21];
                            case 'inputWithEnter': return [3 /*break*/, 23];
                            case 'alert': return [3 /*break*/, 25];
                            case 'cookie': return [3 /*break*/, 27];
                            case 'reset': return [3 /*break*/, 29];
                            case 'switch': return [3 /*break*/, 31];
                        }
                        return [3 /*break*/, 33];
                    case 1:
                        if (tc.arguments.length == 1) {
                            tc.arguments.push('main');
                        }
                        return [4 /*yield*/, driver.open(tc.arguments[0], tc.arguments[1])];
                    case 2:
                        _b.sent();
                        this.result.markPass(tc);
                        return [3 /*break*/, 34];
                    case 3: return [4 /*yield*/, driver.verifyBodyText('body', tc.arguments[0])];
                    case 4:
                        _b.sent();
                        this.result.markPass(tc);
                        return [3 /*break*/, 34];
                    case 5: return [4 /*yield*/, driver.verifyNoBodyText('body', tc.arguments[0])];
                    case 6:
                        _b.sent();
                        this.result.markPass(tc);
                        return [3 /*break*/, 34];
                    case 7: return [4 /*yield*/, driver.assertAttr(tc.arguments[0], tc.arguments[1], tc.arguments.slice(2)[0])];
                    case 8:
                        _b.sent();
                        this.result.markPass(tc);
                        return [3 /*break*/, 34];
                    case 9: return [4 /*yield*/, driver.setAttr(tc.arguments[0], tc.arguments[1], tc.arguments.slice(2)[0])];
                    case 10:
                        _b.sent();
                        this.result.markPass(tc);
                        return [3 /*break*/, 34];
                    case 11: return [4 /*yield*/, driver.verifyBodyText(tc.arguments[0], tc.arguments.slice(1)[0])];
                    case 12:
                        _b.sent();
                        this.result.markPass(tc);
                        return [3 /*break*/, 34];
                    case 13: return [4 /*yield*/, driver.getTitle()];
                    case 14:
                        title = _b.sent();
                        utils_1.assert(title == tc.arguments[0], "[" + tc.line + "] Failed! Expected:<" + tc.arguments[0] + "> Observed: <" + title + ">");
                        this.result.markPass(tc);
                        return [3 /*break*/, 34];
                    case 15: return [4 /*yield*/, driver.doSingleClick(tc.arguments[0])];
                    case 16:
                        _b.sent();
                        return [3 /*break*/, 34];
                    case 17: return [4 /*yield*/, driver.doSingleClick(tc.arguments[0])];
                    case 18:
                        _b.sent();
                        return [4 /*yield*/, utils_1.sleepMS(parseInt(tc.arguments[1]))];
                    case 19:
                        _b.sent();
                        return [4 /*yield*/, driver.verifyBodyText('body', tc.arguments[2])];
                    case 20:
                        _b.sent();
                        this.result.markPass(tc);
                        return [3 /*break*/, 34];
                    case 21: return [4 /*yield*/, driver.doType(tc.arguments[0], tc.arguments.slice(1)[0])];
                    case 22:
                        _b.sent();
                        return [3 /*break*/, 34];
                    case 23: return [4 /*yield*/, driver.doTypeEnter(tc.arguments[0], tc.arguments.slice(1)[0])];
                    case 24:
                        _b.sent();
                        return [3 /*break*/, 34];
                    case 25: return [4 /*yield*/, driver.doAlert(tc.arguments[0])];
                    case 26:
                        _b.sent();
                        return [3 /*break*/, 34];
                    case 27: return [4 /*yield*/, driver.cookie(tc.arguments[0], tc.arguments[1], tc.arguments[2])];
                    case 28:
                        _b.sent();
                        if (tc.arguments[0] == 'verify') {
                            this.result.markPass(tc);
                        }
                        return [3 /*break*/, 34];
                    case 29: return [4 /*yield*/, driver.doReset()];
                    case 30:
                        _b.sent();
                        return [3 /*break*/, 34];
                    case 31: return [4 /*yield*/, driver.switchX(tc.arguments[0])];
                    case 32:
                        _b.sent();
                        return [3 /*break*/, 34];
                    case 33:
                        utils_1.assert(false, "[" + tc.line + "] Invalid command: <" + tc.command + ">");
                        _b.label = 34;
                    case 34: return [2 /*return*/];
                }
            });
        });
    };
    return WSTest;
}(BaseTest_1.BaseTest));
(function () { return __awaiter(void 0, void 0, void 0, function () {
    var mWSTest;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                mWSTest = new WSTest();
                return [4 /*yield*/, mWSTest.main()];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); })();
//# sourceMappingURL=web.js.map