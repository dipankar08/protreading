"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseTest = void 0;
var fs = require('fs');
var chalk = require('chalk');
var util = require('util');
var commander_1 = require("commander");
var Browser_1 = require("../web/Browser");
var result_1 = require("./result");
var utils_1 = require("./utils");
var render = require('micromustache').render;
var request = require('sync-request');
function filterhashComments(line) {
    if (line.indexOf('#') != -1) {
        var prevChar = '';
        var fline = '';
        for (var i = 0; i < line.length; i++) {
            if (line[i] == '#' && prevChar != '\\') {
                break;
            }
            if (line[i] == '\\') {
                if (line[i + 1] != '#') {
                    fline += line[i];
                }
            }
            else {
                fline += line[i];
            }
            prevChar = line[i];
        }
        line = fline;
    }
    return line;
}
var BaseTest = /** @class */ (function () {
    function BaseTest() {
        this.context = {};
        this.result = new result_1.Result();
    }
    // Optical to be override ..
    BaseTest.prototype.modifyContextForDebug = function () { };
    BaseTest.prototype.addMoreOption = function (p) { };
    BaseTest.prototype.onBeforeExecuteTest = function () {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    }; // This function to be called to execute any test
    BaseTest.prototype.onAfterExecuteTest = function () {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    BaseTest.prototype.parseCommand = function () {
        var p = commander_1.program
            .option('-s, --server <url>', 'server endpoints')
            .option('-f, --file <path>', 'path of the test file')
            .option('-l, --line <line>', 'It will execute that number only.')
            .option('-lm, --limit <limit>', 'It will execute this many test from that line.');
        this.addMoreOption(p);
        p.parse(process.argv);
        this.context.file = commander_1.program.file;
        this.context.server = commander_1.program.server;
        this.context.line = commander_1.program.line;
        this.context.limit = commander_1.program.limit;
        this.context.headless = commander_1.program.headless ? commander_1.program.headless == 'true' : true;
        this.context.quit = commander_1.program.quit ? commander_1.program.quit == 'true' : true;
        this.context.browser = commander_1.program.browser == 'firefox' ? Browser_1.EBrowserType.Firefox : Browser_1.EBrowserType.Chrome;
        // debug override
        if (process.env.vs_debug == 'true') {
            this.modifyContextForDebug();
        }
        console.log("Context: " + JSON.stringify(this.context));
    };
    // building testcase from file.
    BaseTest.prototype.buildTestFromFile = function (filepath) {
        var contents = '';
        try {
            contents = fs.readFileSync(filepath, 'utf8');
        }
        catch (err) {
            throw new Error('[Error] You must pass the test-file path in the command like -f ./textcase.txt');
        }
        var lines = contents.split('\n');
        var result = Array();
        for (var i = 0; i < lines.length; i++) {
            var line = lines[i].trim();
            if (line[0] == '#') {
                continue;
            }
            // trim the comments
            line = filterhashComments(line);
            if (line.length == 0) {
                continue;
            }
            var lineNo = i + 1;
            var args = line
                .split('=>')
                .map(function (x) { return x.trim(); })
                .filter(function (y) { return y.length > 0; });
            var command = args[0];
            var is_setup = false;
            if (command.indexOf('!') == 0) {
                command = command.replace('!', '');
                is_setup = true;
            }
            var tc = {
                line: lineNo,
                command: command,
                arguments: args.slice(1),
                is_setup: is_setup,
            };
            result.push(tc);
        }
        if (result.length == 0) {
            throw Error('No test case found');
        }
        console.log(chalk.yellow(util.format('[INFO] Total test case found ', result.length)));
        return result;
    };
    BaseTest.prototype.runAllTestCase = function (testcase) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, testcase_1, tc, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        console.log(chalk.blue("[INFO] Running " + testcase.length + " test cases."));
                        this.result = new result_1.Result();
                        return [4 /*yield*/, this.onBeforeExecuteTest()];
                    case 1:
                        _b.sent();
                        _i = 0, testcase_1 = testcase;
                        _b.label = 2;
                    case 2:
                        if (!(_i < testcase_1.length)) return [3 /*break*/, 15];
                        tc = testcase_1[_i];
                        // replace arguments
                        this.cur_tc = tc;
                        tc.arguments = tc.arguments.map(function (x) { return render(x, _this.context); });
                        this.result.markExecuting(tc);
                        _a = tc.command;
                        switch (_a) {
                            case 'sleep': return [3 /*break*/, 3];
                            case 'sleep_ms': return [3 /*break*/, 5];
                            case 'context': return [3 /*break*/, 7];
                            case 'get': return [3 /*break*/, 8];
                            case 'post': return [3 /*break*/, 10];
                        }
                        return [3 /*break*/, 12];
                    case 3:
                        console.log(chalk.blue(util.format('[INFO][%s] Sleeping %o', tc.line, tc.arguments[0])));
                        return [4 /*yield*/, utils_1.sleep(parseInt(tc.arguments[0]))];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 14];
                    case 5:
                        console.log(chalk.blue(util.format('[INFO][%s] Sleeping %o', tc.line, tc.arguments[0])));
                        return [4 /*yield*/, utils_1.sleepMS(parseInt(tc.arguments[0]))];
                    case 6:
                        _b.sent();
                        return [3 /*break*/, 14];
                    case 7:
                        this.context[tc.arguments[0]] = tc.arguments[1];
                        console.log(chalk.blue(util.format('[INFO][%s] Context Set: now %s', tc.line, JSON.stringify(this.context))));
                        return [3 /*break*/, 14];
                    case 8: return [4 /*yield*/, this.handleGet(tc.arguments, this.result)];
                    case 9:
                        _b.sent();
                        return [3 /*break*/, 14];
                    case 10: return [4 /*yield*/, this.handlePOST(tc.arguments, this.result)];
                    case 11:
                        _b.sent();
                        return [3 /*break*/, 14];
                    case 12: return [4 /*yield*/, this.executeTest(tc)];
                    case 13:
                        _b.sent();
                        return [3 /*break*/, 14];
                    case 14:
                        _i++;
                        return [3 /*break*/, 2];
                    case 15:
                        this.result.printResult();
                        this.onAfterExecuteTest();
                        return [2 /*return*/];
                }
            });
        });
    };
    BaseTest.prototype.main = function () {
        return __awaiter(this, void 0, void 0, function () {
            var testCases;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Main function
                        console.log('Starting API Test...');
                        this.parseCommand();
                        testCases = this.buildTestFromFile(this.context.file);
                        if (this.context.line != undefined) {
                            testCases = testCases.filter(function (x) { return x.line >= _this.context.line; });
                        }
                        if (this.context.limit != undefined) {
                            testCases = testCases.slice(0, this.context.limit);
                        }
                        return [4 /*yield*/, this.runAllTestCase(testCases)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BaseTest.prototype.handleGet = function (args, ret) {
        return __awaiter(this, void 0, void 0, function () {
            var url, expected, observed;
            return __generator(this, function (_a) {
                url = args[0];
                expected = args[1];
                try {
                    observed = this.NetworkCall('GET', url, '');
                    if (observed && utils_1.regexMatch(expected, observed)) {
                        ret.markPass(this.cur_tc);
                        utils_1.captureContext(expected, observed, this.context);
                    }
                    else {
                        ret.markFail(this.cur_tc, "Failed due to Response Mismatch: Expected:<" + expected + ">, observed:<" + observed + ">");
                    }
                }
                catch (err) {
                    ret.markFail(this.cur_tc, err.message);
                }
                return [2 /*return*/];
            });
        });
    };
    BaseTest.prototype.handlePOST = function (args, ret) {
        return __awaiter(this, void 0, void 0, function () {
            var url, data, expected, observed;
            return __generator(this, function (_a) {
                url = args[0];
                data = args[1];
                expected = args[2];
                try {
                    observed = this.NetworkCall('POST', url, data);
                    if (observed && utils_1.regexMatch(expected, observed)) {
                        ret.markPass(this.cur_tc);
                        utils_1.captureContext(expected, observed, this.context);
                    }
                    else {
                        ret.markFail(this.cur_tc, "Failed due to Response Mismatch: Expected:<" + expected + ">, observed:<" + observed + ">");
                    }
                }
                catch (err) {
                    ret.markFail(this.cur_tc, err.message);
                }
                return [2 /*return*/];
            });
        });
    };
    BaseTest.prototype.NetworkCall = function (method, url, json) {
        if (method == 'POST') {
            try {
                json = JSON.parse(json);
            }
            catch (err) {
                return err.message;
            }
        }
        var res = request(method, url, {
            json: json,
        });
        var resStr = null;
        try {
            resStr = res.getBody('utf8');
        }
        catch (e) {
            resStr = e.toString();
        }
        if (resStr) {
            if (res.statusCode != 200) {
                return resStr + "(Error Code:" + res.statusCode + ")";
            }
            else {
                return resStr;
            }
        }
        else {
            throw new Error("Server returns empty resp: " + url);
        }
    };
    return BaseTest;
}());
exports.BaseTest = BaseTest;
//# sourceMappingURL=BaseTest.js.map