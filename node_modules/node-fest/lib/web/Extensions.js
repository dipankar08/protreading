"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var selenium_webdriver_1 = require("selenium-webdriver");
var utils_1 = require("../common/utils");
selenium_webdriver_1.WebDriver.prototype.cookie = function (action, key, value) {
    return __awaiter(this, void 0, void 0, function () {
        var driver, _a, val, err_1, _b, _c, _d, _e, err_2;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    driver = this;
                    _a = action;
                    switch (_a) {
                        case 'verify': return [3 /*break*/, 1];
                        case 'set': return [3 /*break*/, 6];
                        case 'delete': return [3 /*break*/, 11];
                    }
                    return [3 /*break*/, 13];
                case 1:
                    val = undefined;
                    _f.label = 2;
                case 2:
                    _f.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, driver.manage().getCookie(key)];
                case 3:
                    val = _f.sent();
                    utils_1.assert(val.value == value, "[Cookie] Expected:<" + value + ">, Observed:<" + val.value + ">");
                    return [3 /*break*/, 5];
                case 4:
                    err_1 = _f.sent();
                    utils_1.assert('undefined' == value, "[Cookie] Expected:<" + value + ">, Observed:<" + 'undefined' + ">");
                    return [3 /*break*/, 5];
                case 5: return [3 /*break*/, 14];
                case 6:
                    _f.trys.push([6, 9, , 10]);
                    _c = (_b = driver.manage()).addCookie;
                    _d = { name: key, value: value };
                    _e = URL.bind;
                    return [4 /*yield*/, driver.getCurrentUrl()];
                case 7: return [4 /*yield*/, _c.apply(_b, [(_d.domain = new (_e.apply(URL, [void 0, _f.sent()]))().hostname, _d)])];
                case 8:
                    _f.sent();
                    return [3 /*break*/, 10];
                case 9:
                    err_2 = _f.sent();
                    console.log("[COOKIE] Not able to set cookie due to " + err_2);
                    return [3 /*break*/, 10];
                case 10: return [3 /*break*/, 14];
                case 11: return [4 /*yield*/, driver.manage().deleteCookie(key)];
                case 12:
                    _f.sent();
                    return [3 /*break*/, 14];
                case 13:
                    utils_1.assert(false, "[Cookie] UnExpected action:<" + action + ">");
                    _f.label = 14;
                case 14: return [2 /*return*/];
            }
        });
    });
};
var winHandleMap = {};
selenium_webdriver_1.WebDriver.prototype.switchX = function (window_name) {
    return __awaiter(this, void 0, void 0, function () {
        var handle, driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    handle = winHandleMap[window_name];
                    driver = this;
                    return [4 /*yield*/, driver.switchTo().window(handle)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, utils_1.sleep(2)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
};
selenium_webdriver_1.WebDriver.prototype.open = function (url, window_name) {
    return __awaiter(this, void 0, void 0, function () {
        var driver, allHandles, this_handle, _a, _b, _c, _d, err_3;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    driver = this;
                    if (!(window_name == 'main')) return [3 /*break*/, 2];
                    return [4 /*yield*/, driver.executeScript("window.open('" + url + "')")];
                case 1:
                    _e.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, driver.executeScript("window.open('" + url + "','_blank')")];
                case 3:
                    _e.sent();
                    _e.label = 4;
                case 4: 
                // Wait 500ms to open the page
                return [4 /*yield*/, utils_1.sleepMS(500)];
                case 5:
                    // Wait 500ms to open the page
                    _e.sent();
                    return [4 /*yield*/, driver.getAllWindowHandles()];
                case 6:
                    allHandles = _e.sent();
                    this_handle = allHandles[allHandles.length - 1];
                    winHandleMap[window_name] = this_handle;
                    console.log(winHandleMap);
                    return [4 /*yield*/, this.switchX(window_name)];
                case 7:
                    _e.sent();
                    _e.label = 8;
                case 8:
                    _e.trys.push([8, 11, , 12]);
                    _b = (_a = driver.manage()).addCookie;
                    _c = { name: 'debug', value: '1' };
                    _d = URL.bind;
                    return [4 /*yield*/, driver.getCurrentUrl()];
                case 9: return [4 /*yield*/, _b.apply(_a, [(_c.domain = new (_d.apply(URL, [void 0, _e.sent()]))().hostname, _c)])];
                case 10:
                    _e.sent();
                    return [3 /*break*/, 12];
                case 11:
                    err_3 = _e.sent();
                    console.log('[open] Not able to set cookie while open');
                    return [3 /*break*/, 12];
                case 12: return [2 /*return*/];
            }
        });
    });
};
selenium_webdriver_1.WebDriver.prototype.doType = function (selector, text) {
    return __awaiter(this, void 0, void 0, function () {
        var driver, ele;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    driver = this;
                    return [4 /*yield*/, resolveElement(driver, selector)];
                case 1:
                    ele = _a.sent();
                    return [4 /*yield*/, ele.clear()];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, ele.sendKeys(text)];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
};
selenium_webdriver_1.WebDriver.prototype.doTypeEnter = function (selector, text) {
    return __awaiter(this, void 0, void 0, function () {
        var driver, ele;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    driver = this;
                    return [4 /*yield*/, resolveElement(driver, selector)];
                case 1:
                    ele = _a.sent();
                    return [4 /*yield*/, ele.clear()];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, ele.sendKeys(text + selenium_webdriver_1.Key.ENTER)];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
};
selenium_webdriver_1.WebDriver.prototype.doReset = function () {
    return __awaiter(this, void 0, void 0, function () {
        var driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    driver = this;
                    return [4 /*yield*/, driver.manage().deleteAllCookies()];
                case 1:
                    _a.sent();
                    console.log("You have deleted all the cookies");
                    return [2 /*return*/];
            }
        });
    });
};
selenium_webdriver_1.WebDriver.prototype.doSingleClick = function (selector) {
    return __awaiter(this, void 0, void 0, function () {
        var driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    driver = this;
                    return [4 /*yield*/, utils_1.sleep(1)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, resolveElement(driver, selector)];
                case 2: return [4 /*yield*/, (_a.sent()).click()];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
};
selenium_webdriver_1.WebDriver.prototype.doAlert = function (action) {
    return __awaiter(this, void 0, void 0, function () {
        var driver, alert_1, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    driver = this;
                    utils_1.sleep(5);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, driver.switchTo().alert()];
                case 2:
                    alert_1 = _a.sent();
                    if (action == "ok") {
                        // for clicking on ok button
                        alert_1.accept();
                    }
                    else if (action == 'cancel') {
                        // for clicking on cancel button
                        alert_1.dismiss();
                    }
                    else {
                        throw ("[Alert] You must pass either <alert:ok> or <alert:cancel>");
                    }
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _a.sent();
                    throw ("[Alert] You must pass either <alert:ok> or <alert:cancel> Error: " + e_1);
                case 4: return [2 /*return*/];
            }
        });
    });
};
selenium_webdriver_1.WebDriver.prototype.assertElementVisible = function (selector) {
    return __awaiter(this, void 0, void 0, function () {
        var driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    driver = this;
                    return [4 /*yield*/, resolveElement(driver, selector)];
                case 1: return [4 /*yield*/, (_a.sent()).isDisplayed()];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
};
selenium_webdriver_1.WebDriver.prototype.assertAttr = function (selector, attrKey, attrValue) {
    return __awaiter(this, void 0, void 0, function () {
        var driver, ele, value;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    driver = this;
                    return [4 /*yield*/, resolveElement(driver, selector)];
                case 1:
                    ele = _a.sent();
                    return [4 /*yield*/, ele.getAttribute(attrKey)];
                case 2:
                    value = _a.sent();
                    if (value == attrValue) {
                        console.log("assertAttr: PASS");
                    }
                    else {
                        throw "assertAttr fails for " + selector + ", Found : " + value + " where as Expected: " + attrValue;
                    }
                    return [2 /*return*/];
            }
        });
    });
};
selenium_webdriver_1.WebDriver.prototype.setAttr = function (selector, attrKey, attrValue) {
    return __awaiter(this, void 0, void 0, function () {
        var driver, str;
        return __generator(this, function (_a) {
            driver = this;
            str = "document.querySelector('" + selector + "').setAttribute('" + attrKey + "', '" + attrValue + "')";
            executeScript(driver, str);
            return [2 /*return*/];
        });
    });
};
function executeScript(driver, script) {
    console.log("[executeScript] <" + script + ">");
    driver.executeScript(script);
}
selenium_webdriver_1.WebDriver.prototype.verifyBodyText = function (selector, text) {
    return __awaiter(this, void 0, void 0, function () {
        var driver, title, data, data1, _i, data_1, x, t, data2, text2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    driver = this;
                    return [4 /*yield*/, driver.getTitle()];
                case 1:
                    title = _a.sent();
                    return [4 /*yield*/, utils_1.sleep(1)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, resolveElementAll(driver, selector)];
                case 3:
                    data = _a.sent();
                    data1 = '';
                    _i = 0, data_1 = data;
                    _a.label = 4;
                case 4:
                    if (!(_i < data_1.length)) return [3 /*break*/, 7];
                    x = data_1[_i];
                    if (!x.isDisplayed()) return [3 /*break*/, 6];
                    return [4 /*yield*/, x.getText()];
                case 5:
                    t = _a.sent();
                    data1 += t;
                    _a.label = 6;
                case 6:
                    _i++;
                    return [3 /*break*/, 4];
                case 7:
                    data2 = data1.toLowerCase();
                    text2 = text.toLowerCase();
                    if (data2.indexOf(text2) != -1) {
                        //console.log("verifyBodyText: PASS")
                        return [2 /*return*/];
                    }
                    else {
                        //console.log(data)
                        //console.log(data1)
                        throw "[verifyBodyText] this fails  as we are not able to find <" + text + "> in the selector <" + selector + ">";
                    }
                    return [2 /*return*/];
            }
        });
    });
};
selenium_webdriver_1.WebDriver.prototype.verifyNoBodyText = function (selector, text) {
    return __awaiter(this, void 0, void 0, function () {
        var driver, data, data1, _i, data_2, x, t, data2, text2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    driver = this;
                    return [4 /*yield*/, utils_1.sleep(1)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, resolveElementAll(driver, selector)];
                case 2:
                    data = _a.sent();
                    data1 = '';
                    _i = 0, data_2 = data;
                    _a.label = 3;
                case 3:
                    if (!(_i < data_2.length)) return [3 /*break*/, 6];
                    x = data_2[_i];
                    if (!x.isDisplayed()) return [3 /*break*/, 5];
                    return [4 /*yield*/, x.getText()];
                case 4:
                    t = _a.sent();
                    data1 += t;
                    _a.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 3];
                case 6:
                    data2 = data1.toLowerCase();
                    text2 = text.toLowerCase();
                    if (data2.indexOf(text2) != -1) {
                        throw "[verifyNoBodyText] failed as We are able to find the test <" + text + "> in the selector  <" + selector + ">.";
                    }
                    else {
                        return [2 /*return*/];
                    }
                    return [2 /*return*/];
            }
        });
    });
};
function resolveElementAll(driver, sel) {
    return __awaiter(this, void 0, void 0, function () {
        var val, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, driver.findElements(selenium_webdriver_1.By.css(sel))];
                case 1:
                    val = _a.sent();
                    if (val.length > 0) {
                        return [2 /*return*/, val];
                    }
                    else {
                        throw "[resolveElementAll] Not able to find selector in the webpage for <" + sel + "> ";
                    }
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    throw "[resolveElementAll] Not able to find selector in the webpage for <" + sel + "> ";
                case 3: return [2 /*return*/];
            }
        });
    });
}
function resolveElement(driver, sel) {
    return __awaiter(this, void 0, void 0, function () {
        var val, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, driver.findElements(selenium_webdriver_1.By.css(sel))];
                case 1:
                    val = _a.sent();
                    if (val.length > 0) {
                        return [2 /*return*/, val[0]];
                    }
                    else {
                        throw "[resolveElement] Not able to find selector in the webpage for <" + sel + "> ";
                    }
                    return [3 /*break*/, 3];
                case 2:
                    error_2 = _a.sent();
                    throw "[resolveElement] Not able to find selector in the webpage for <" + sel + "> ";
                case 3: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=Extensions.js.map