#!/usr/bin/env node
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var BaseTest_1 = require("../common/BaseTest");
var utils_1 = require("../common/utils");
var chalk = require('chalk');
var util = require('util');
var program = require('commander');
var uniqueString = require('unique-string');
var WebSocket = require('ws');
var globalConnectionMap = new Map();
function connect(url) {
    var uid = uniqueString();
    return new Promise(function (resolve, reject) {
        var server = new WebSocket(url);
        server.onopen = function () {
            globalConnectionMap.set(uid, { ws: server, msg: [] });
            resolve(uid);
        };
        server.onerror = function (err) {
            reject(err);
        };
        server.onmessage = function (data) {
            var _a;
            (_a = globalConnectionMap.get(uid)) === null || _a === void 0 ? void 0 : _a.msg.push(data.data);
        };
        server.onclose = function () {
            console.log("onClose called");
            // globalConnectionMap.delete(uid)
        };
    });
}
function checkReadFromQueue(tc, con_id, expected, result) {
    var con = globalConnectionMap.get(tc.arguments[0]);
    utils_1.assert(con != undefined, "WS connecting doesn't exist");
    if (con.msg.length == 0 && expected == 'no data') {
        result.markPass(tc);
        return;
    }
    utils_1.assert((con === null || con === void 0 ? void 0 : con.msg.length) != 0, "No message exist but expected:<" + expected + ">");
    var msg = con.msg.shift();
    var result1 = utils_1.regexMatch(expected, msg);
    if (result1) {
        result.markPass(tc);
    }
    else {
        throw Error("Not found expected message but expected:<" + tc.arguments[1] + ">, observed:<" + msg + ">");
    }
}
function dump() {
    var res = '';
    res += "====  DUMP START ========\n";
    res += "Number of Coneection: " + globalConnectionMap.size + " \n";
    globalConnectionMap.forEach(function (v, k) {
        res += k + " :: " + v.msg.join("->") + "\n";
    });
    res += "====  DUMP END ========\n";
    return res;
}
var WSTest = /** @class */ (function (_super) {
    __extends(WSTest, _super);
    function WSTest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WSTest.prototype.modifyContextForDebug = function () {
        this.context.file = "/Users/dip/dipankar/node-fest/src/ws/sample.txt";
        //this.context.line = 10;
        //this.context.limit = 2;
    };
    // executing test case...
    WSTest.prototype.executeTest = function (tc) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, conn_id, err_1, con, err_2, con, err_3, i;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = tc.command;
                        switch (_a) {
                            case 'connect': return [3 /*break*/, 1];
                            case 'disconnect': return [3 /*break*/, 5];
                            case 'send': return [3 /*break*/, 9];
                            case 'check_recv': return [3 /*break*/, 13];
                            case 'debug': return [3 /*break*/, 14];
                        }
                        return [3 /*break*/, 15];
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, connect(tc.arguments[0])];
                    case 2:
                        conn_id = _b.sent();
                        this.context[tc.arguments[1]] = conn_id;
                        console.log(chalk.blue(util.format('[INFO][%s] Context Set: now %s', tc.line, JSON.stringify(this.context))));
                        this.result.markPass(tc);
                        if (tc.arguments.length > 2) {
                            checkReadFromQueue(tc, conn_id, tc.arguments[2], this.result);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _b.sent();
                        this.result.markFail(tc, err_1.message);
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 16];
                    case 5:
                        _b.trys.push([5, 7, , 8]);
                        con = globalConnectionMap.get(tc.arguments[0]);
                        utils_1.assert(con != undefined, "WS connecting doesn't exist");
                        con === null || con === void 0 ? void 0 : con.ws.close();
                        return [4 /*yield*/, utils_1.sleepMS(500)];
                    case 6:
                        _b.sent();
                        this.result.markPass(tc);
                        if (tc.arguments.length > 1) {
                            checkReadFromQueue(tc, tc.arguments[0], tc.arguments[1], this.result);
                        }
                        return [3 /*break*/, 8];
                    case 7:
                        err_2 = _b.sent();
                        this.result.markFail(tc, err_2.message);
                        return [3 /*break*/, 8];
                    case 8: return [3 /*break*/, 16];
                    case 9:
                        _b.trys.push([9, 11, , 12]);
                        con = globalConnectionMap.get(tc.arguments[0]);
                        utils_1.assert(con != undefined, "WS connecting doesn't exist");
                        con === null || con === void 0 ? void 0 : con.ws.send(tc.arguments[1]);
                        return [4 /*yield*/, utils_1.sleepMS(500)];
                    case 10:
                        _b.sent(); // This might cause some issue as process happens async.// If see error incase this limit.
                        this.result.markPass(tc);
                        if (tc.arguments.length > 2) {
                            checkReadFromQueue(tc, tc.arguments[0], tc.arguments[2], this.result);
                        }
                        return [3 /*break*/, 12];
                    case 11:
                        err_3 = _b.sent();
                        this.result.markFail(tc, err_3.message);
                        return [3 /*break*/, 12];
                    case 12: return [3 /*break*/, 16];
                    case 13:
                        try {
                            for (i = 1; i < tc.arguments.length; i++) {
                                checkReadFromQueue(tc, tc.arguments[0], tc.arguments[i], this.result);
                            }
                        }
                        catch (err) {
                            this.result.markFail(tc, err.message);
                        }
                        return [3 /*break*/, 16];
                    case 14:
                        try {
                            console.log(dump());
                        }
                        catch (err) {
                            this.result.markFail(tc, err.message);
                        }
                        return [3 /*break*/, 16];
                    case 15:
                        utils_1.assert(false, "[" + tc.line + "] Invalid command: <" + tc.command + ">");
                        _b.label = 16;
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    return WSTest;
}(BaseTest_1.BaseTest));
(function () { return __awaiter(void 0, void 0, void 0, function () {
    var mWSTest;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                mWSTest = new WSTest();
                return [4 /*yield*/, mWSTest.main()];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); })();
//# sourceMappingURL=ws.js.map